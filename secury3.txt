package com.blogpessoal1.meublog.services;


import java.nio.charset.Charset;
import java.util.Optional;
import org.apache.commons.codec.binary.base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.SecurityProperties.User;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.blogpessoal1.meublog.user_login;
import com.blogpessoal1.meublog.model.usuario;
import com.blogpessoal1.meublog.reposytorio.usuariorepositorio;

@Service
public class usuarioservice {
	
	@Autowired
	private usuariorepositorio repository;
	
	public  usuario cadastraUsuario(usuario usuario) {
		@CryptPassowordEncoder encoder = new BCryptPasswordEncoder();
	 String senhaencoder = encoder.encode(usuario.getSenha());
	 usuario.setSenha(senhaencoder);
	 return repository.save(usuario);
	
	 public Optional<userlogin> logar(optional<userlogin>.user){
		 @CryptPassowordEncoder encoder = new BCryptPasswordEncoder();
		 Optional<usuario>usuario =repository.findByusuario(User.get().getUsuario());
		 
		 if(usuario.isPresent()) {
			 if(encoder.matches(user.get().getsenha, usuario.get().getSenha())) {
			 String.auth = user.get().getusuario() +":"+ user.get().getsenha();
			 byte[] encodedauth = base64.encoderBase64(auth.getBytes(Charset.forName("US-ASCII")));
			 String authHeader = "Basic " + new String(encodedauth);
			 user.get().settoken(autohHeader);
			 user.get.setNome(Usuario.get().getNome());
			 
			 return user;
		 }
		 }
		 return null;
}


	}